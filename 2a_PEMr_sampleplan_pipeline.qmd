---
title: "PEMsamplr_pipeline"
format: html
cache: TRUE
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

## 1. Preparing for a new PEM project

The PEMr package is designed to help users access the functions and follow a workflow to create a Predictive Ecosystem Map project. The first step in this process is to prepare the basic working layers for an Area of Interest (AOI). This script pulls functions from the PEMprepR portion of the PEMr package. These packages are currently in development and there maybe breaking changes.

The first step needed is to generate a new PEM project. This will include a new R-studio project, a template folder structure, and a series of template workflow quarto documents.

## Download the latest development version of the packages

```{r}
#| eval: false
# remotes::install_github("ninoxconsulting/PEMr", build_vignettes = TRUE)
# remotes::install_github("ninoxconsulting/PEMprepr", build_vignettes = TRUE)
# remotes::install_github("ninoxconsulting/PEMsamplr", build_vignettes = TRUE)
library(PEMr)
library(PEMprepr)
require(PEMsamplr)
require(tictoc)

```

### Create folder structure for map project

The first step is to decide on the file path where your mapping projects files will be stored. The choose a name for your map project (area of interest (AOI)). If you supply a spatial file of the map area boundary this will be copiedinto the new project files. Supplying this file not required at this stage but is a convenience feature.

## 2. Generating base data for modelling (5m resolution as default)

```{r setup, eval = FALSE}
#project_name <- "{{ aoi_name }}"
#project_name <- "datecreek_aoi"
# read_fid <- function(fid_path = file.path(proj_dir,"_meta", "fid.rds")) {
#   if (!fs::file_exists(fid_path)) {
#     return(NULL)
#   }
#   readRDS(fid_path)
# }

fid <- read_fid()
aoi_dir = read_fid()$dir_0010_vector$path_abs

```

## 3. Generating landscape data for sample plan development (25m resolution as default)

The workflow of samplr is still in development and likely to change.

```{r warnings = FALSE}
#| eval: false
# vector (aoi, roads and start points)

# define directory where aoi is located 

in_dir = PEMprepr::read_fid()$dir_1010_vector$path_abs
aoi_file = fs::path(in_dir, "aoi_snapped.gpkg" )

out_dir <- PEMprepr::read_fid()$dir_201010_inputs$path_abs

# generate a larger extent AOI 

aoils <- snap_aoi(aoi_file, method = "expand", buffer = 1000, write_output = FALSE)
sf::st_write(aoils, fs::path(out_dir, "aoi_snapped_ls.gpkg"), append = FALSE)

# create a raster template at 25m resolution

r25 <- create_template_raster(aoils,
                              res = 25,
                              out_dir = PEMprepr::read_fid()$dir_201010_inputs$path_abs,
                              write_output = TRUE)

# genererate a DEM raster
dem25 = get_cded_dem(aoi = r25,
                     res = 25,
                     out_dir = read_fid()$dir_201010_inputs$path_abs,
                     write_output = TRUE, overwrite = TRUE)

# generate a BEC raster 

bec_rast25 <- create_bgc_template(
  field = "MAP_LABEL",
  template=  r25,
  out_dir = PEMprepr::read_fid()$dir_201010_inputs$path_abs,
  write_output = TRUE)

```

```{r}
#| eval: false
# Generate landscape covariates

create_landscape_covariates(
  dtm = dem25,
  saga_path = saga_cmd("C:/SAGA/saga_cmd.exe"),
  layers = c("mrvbf", "dah", "landform"),
  out_dir = PEMprepr::read_fid()$dir_201010_inputs$path_abs,
  sieve_size = 10,
  dah_threshold = 0.2,
  saga_param = list(
    T_SLOPE = 64, TPCTL_V = 6, T_PCTL_R = 2,
    P_SLOPE = 4.0, P_PCTL = 3.0, UPDATE = 1,
    CLASSIFY = 1, MAX_RES = 100
  ))
  
```


```{r}
# create binned landscape
landscapes <- create_binned_landscape(
  in_dir = file.path(read_fid()$dir_201010_inputs$path_abs,"25m","modules"),
  layers = c("dah_LS", "landform_LS"),
  write_output = TRUE)

terra::plot(landscapes)

routdf <- check_bgc_landscapes(bec_rast25, landscapes)

ggplot2::ggplot(routdf, ggplot2::aes(landscape)) +
  ggplot2::geom_histogram() +
  ggplot2::facet_wrap(~MAP_LABEL)
```

```{r}
#| eval: false
# download roads layer and run through standard checks

out_dir <- PEMprepr::read_fid()$dir_201010_inputs$path_abs

roadsls <- get_roads(aoils, out_dir)

check_roads(roadsls)

```

```{r}
#| eval: false
 # Get start points and run checks

cities <- sf::st_read(fs::path(PEMprepr::read_fid()$dir_1010_vector$path_rel,"major_towns_bc.gpkg"))

loc <- data.frame(NAME = "Smithers",
                  X = 889571,
                  Y = 1157078)

loc <- st_as_sf(loc,
                coords = c("X", "Y"), crs = 4326)
                #crs = 3005)

sf::st_geometry(loc)<- "geom"
cities <- dplyr::bind_rows(cities, loc)

# in study area
nearest_town = "TEST_location"
start <- cities[cities$NAME == nearest_town,"NAME"]

check_locations( roads = roadsls, locations = start)

sf::st_write(start, fs::path(out_dir, "start.gpkg"), append = FALSE)
```
# check landscape class with Bec
routdf <- check_bgc_landscapes(bec_rast25, landscapes)

ggplot2::ggplot(routdf, ggplot2::aes(landscape)) +
  ggplot2::geom_histogram() +
  ggplot2::facet_wrap(~MAP_LABEL)


# download roads layer and run through standard checks

out_dir <- read_fid()$dir_201010_inputs$path_abs

roadsls <- get_roads(aoils, out_dir)

check_roads(roadsls)

terra::plot(roadsls)




# Get start points and run checks

cities <- sf::st_read(file.path(read_fid()$dir_1010_vector$path_abs,"major_towns_bc.gpkg"))

loc <- data.frame(NAME = "TEST_location",
                  X = 889571,
                  Y = 1157078)

loc <- sf::st_as_sf(loc,
                coords = c("X", "Y"),
                crs = 3005)

sf::st_geometry(loc)<- "geom"
cities <- dplyr::bind_rows(cities, loc)

# in study area
## in the case of deception the intial buffered road layer is not extensive envough to reach the town of Smithers.
## better to download a road layer with boundary of AOI and the nearest_town(s) as the bounding box.

nearest_town = "Smithers"
start <- cities[cities$NAME == nearest_town,"NAME"]


check_locations(roads = roadsls, locations = start)

sf::st_write(start, file.path(out_dir, "start.gpkg"), append = FALSE)


## Generate the cost layer - need to review these two scripts and decided which method to use. 
## These can be run as stand alone scripts and are located here: 

#https://github.com/ninoxconsulting/PEMsamplr/blob/create_sampleplan/R/placeholder_prep_cost_layer_old.R


## Currently there are two options
## old version
#03_sample_plan_new_version.R

## new version
#03_sample_plan_new_version.R
#fn_prep_cost_layer_utils.R

```

# Generate sample plan inputs

This section of codes generates all the required inputs to build the sample plan. The final step is to compile into a single folder.

```{r eval = FALSE}

# define the input directories
sampleplan_dir <- read_fid()$dir_201010_inputs$path_abs

#read in cost layer
# note this points to the old sample plan version created by placeholder script
acost <- terra::rast(fs::path(sampleplan_dir, "acost.tif" ))

# read in input layers
bec = terra::rast(fs::path(PEMprepr::read_fid()$dir_201010_inputs$path_abs, "25m", "bec.tif"))
binned_landscape = terra::rast(fs::path(PEMprepr::read_fid()$dir_201010_inputs$path_abs, "25m", "modules", "landscape_binned.tif"))
acost <- terra::rast(fs::path(sampleplan_dir, "acost.tif" ))


# check how the costs are distributed across BEC zones to determine viability 
ck <- classify_bgc_cost( bec, binned_landscape, acost)

ggplot2::ggplot(ck, ggplot2::aes(landscape, fill = cost_code)) +
  ggplot2::geom_histogram(bins = 30) +
  ggplot2::facet_wrap(~MAP_LABEL)




# generate cost penalty
# assigns a higher cost to areas with various criteria

vec_dir = fs::path(PEMprepr::read_fid()$dir_1010_vector$path_abs)
dem = terra::rast(fs::path(PEMprepr::read_fid()$dir_201010_inputs$path_abs, "25m", "dem.tif"))
cost =  acost
costval = 3000
vri_cost = 2500
calc_by_qq = TRUE


cost_penalty <- create_cost_penalty(vec_dir = vec_dir,
                                    cost = acost,
                                    dem = dem,
                                    costval = 3000,
                                    vri_cost = 2500,
                                    calc_by_qq = TRUE,
                                    write_output = FALSE)



terra::plot(cost_penalty)

# create no sample areas
# detemines the areas where samples will be excluded

cost_masked <- create_cost_exclusion(vec_dir = vec_dir,
                                     cost = cost_penalty,
                                     buffer = 150,
                                     write_output = FALSE)


terra::writeRaster(cost_masked,
                   fs::path(PEMprepr::read_fid()$dir_201010_inputs$path_abs,
                            "cost_final.tif"), overwrite = TRUE)


# generate a BGC cost mask per BGC in map area

out_dir <- fs::path(PEMprepr::read_fid()$dir_2010_standard$path_abs, "20_masks")
cost_masked <- terra::rast(fs::path(sampleplan_dir, "cost_final.tif" ))
vec_dir = fs::path(PEMprepr::read_fid()$dir_1010_vector$path_abs)


create_bgc_mask(vec_dir, cost_masked, out_dir = exclusion_path)




# Move files to the same folder (Note this might be redundant if needed)

root_path <- fs::path(PEMprepr::read_fid()$dir_201010_inputs$path_abs)

move_files <- function(root_path){

  ftm <- fs::dir_ls(root_path,recurse = T, regexp = ".tif$")

  for (i in ftm){
    # i = ftm[1]

    finame <- basename(i)
    froot <-  basename(fs::dir_ls(root_path, recurse = F, regexp = ".tif$"))

    if(finame %in% froot) {
      cli::cli_alert_success(
        " {.val finame}. skipped "
      )
    } else {

      fnew <- fs::path(root_path, finame)
      fmove <- fs::file_move(i, fnew)
      cli::cli_alert_success(
        " {.val i}. moved to  "
      )
    }
  }

}

move_files(root_path)


```

### congratulaitions you are now ready to start developing the sample plan !

# Generate a sample plan

```{r eval = FALSE}

#remotes::install_github("ninoxconsulting/PEMprepr")
library(PEMprepr)

remotes::install_github("ninoxconsulting/PEMsamplr", ref = "create_sampleplan")
library(PEMsamplr)

#devtools::install_github("kdaust/clhs")
library(clhs)



# define the location of input layers used in the latin hyper cube sampling
landscape_dir <- fs::path(PEMprepr::read_fid()$dir_201010_inputs$path_abs)

# define the location of the output clhs points
clhs_out_dir <- PEMprepr::read_fid()$dir_20103010_clhs$path_abs

# stack the layers and convert to factor
# TODO: potential to clean this up into a seperate script

fileoi <- c("dah_LS.tif", "mrvbf_LS.tif", "landform_LS.tif")
filesoi <- list.files(landscape_dir, full.names = TRUE)[list.files(landscape_dir) %in% fileoi]

all_cov <- terra::rast(filesoi)
all_cov <- terra::as.factor(all_cov)
terra::is.factor(all_cov)

# add cost layer 
cost <- terra::rast(fs::path(landscape_dir, "cost_final.tif"))
all_cov<- c(all_cov, cost)

# check that the cavariates are factors (not needed for cost layer)
terra::is.factor(all_cov)


# read in bec data and loop through each bec zone to generate clhs sample plans


bec_dir = fs::path(PEMprepr::read_fid()$dir_201020_masks$path_abs)

boi <- list.files(bec_dir, pattern = ".tif")
#subset only some files from list
#boi <- boi[c(2,5,6)]

for(b in boi) {
  #b <- boi[1]
  boi_mask <- terra::rast(file.path(bec_dir, b))
  names(boi_mask) = "mask"
  bname <- gsub("_exclude_mask.tif", "", b)

  sample_layers_masked <- c(all_cov, boi_mask) |>
    terra::mask(boi_mask)
  sample_layers_masked <- sample_layers_masked[[1:4]]

 # terra::writeRaster(sample_layers_masked, fs::path(clhs_out_dir, paste0(bname,"_clhs_sample_mask.tif")), overwrite = TRUE)

  # create replicate number of different clhs sample plans
  
  for(rot in 1:5){
   #rot = 1
    sample_points <- create_clhs(all_cov = sample_layers_masked,
                                 num_slices = 5,
                                 to_include = NULL,
                                 n_points = 5 ,
                                 min_dist = 900,
                                 num_sample = 5000000)

    sample_points <- dplyr::mutate(sample_points, bgc = bname)
    fname <- paste0(bname,"_clhs_sample_",rot,".gpkg")
    sf::st_write(sample_points, file.path(clhs_out_dir, fname), append=FALSE, quite = TRUE)

  }

}


# Once the sample plan are generated we can review the comparative costs and
# plot each replicate per BEC zone 

plot_clhs_cost(clhs_out_dir)


# After a review, we need to select a sample plan for each BEC zone. This is 
# usually the plan with the lowest cost. This will be the input to geterate the 
# full sample plan. 

clhs_out_dir <- PEMprepr::read_fid()$dir_20103010_clhs$path_abs

# two examples of potential clhs sets to use for full sample plan 

clhs_set <- "ICHmc2_clhs_sample_3.gpkg"
#clhs_set <- c("ICHmc2_clhs_sample_3.gpkg", "ICHmc1_clhs_sample_3.gpkg")

# generate sample plan (spatial file) and sample plan (csv)
create_sampleplan(clhs_set)


```
